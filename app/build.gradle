plugins {
    alias(libs.plugins.androidApplication)
    alias(libs.plugins.jetbrainsKotlinAndroid)
}

// In your build.gradle file
def localProperties = new Properties()
localProperties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    namespace 'info.thanhtunguet.wakeserver'
    compileSdk 34

    defaultConfig {
        applicationId "info.thanhtunguet.wakeserver"
        minSdk 26
        targetSdk 34
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        // Accessing properties
        // def myProperty = localProperties.getProperty('myProperty')
        // Access configuration values from gradle.properties
        buildConfigField "String", "CF_API_KEY", "${localProperties.getProperty('CF_API_KEY')}"
        buildConfigField "String", "CF_EMAIL", "${localProperties.getProperty('CF_EMAIL')}"
        buildConfigField "String", "BOT_TOKEN", "${localProperties.getProperty('BOT_TOKEN')}"
        buildConfigField "String", "CHAT_ID", "${localProperties.getProperty('CHAT_ID')}"
        buildConfigField "String", "ZONE_ID", "${localProperties.getProperty('ZONE_ID')}"
        buildConfigField "String", "RECORD_ID", "${localProperties.getProperty('RECORD_ID')}"
        buildConfigField "int", "WEB_PORT", "${localProperties.getProperty('WEB_PORT')}"
        buildConfigField "String", "PC_MAC", "${localProperties.getProperty('PC_MAC')}"
        buildConfigField "String", "PC_IP", "${localProperties.getProperty('PC_IP')}"
        buildConfigField "int", "PC_PORT", "${localProperties.getProperty('PC_PORT')}"
        buildConfigField "int", "PC_TIMEOUT", "${localProperties.getProperty('PC_TIMEOUT')}"
        buildConfigField "String", "CERTIFICATE_FILENAME", "${localProperties.getProperty('CERTIFICATE_FILENAME')}"
        buildConfigField "String", "CERTIFICATE_PASSWORD", "${localProperties.getProperty('CERTIFICATE_PASSWORD')}"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.1'
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3

    testImplementation libs.junit

    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4

    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest

    implementation libs.slf4j.simple // for logging
    implementation libs.nanohttpd
    implementation libs.gson

    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-android:$ktor_version"
    implementation "io.ktor:ktor-client-logging:$ktor_version"
    implementation libs.kotlinx.coroutines.android
}
